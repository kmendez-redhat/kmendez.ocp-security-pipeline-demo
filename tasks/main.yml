---
# tasks file for kmendez.ocp-security-pipeline-demo
- name: "Install / Configure Demo"
  block:
    - name: Gratuitous logo
      debug:
       msg: "{{ demo_logo.split('\n') }}"
    - name: Create docker group
      group:
        name: docker
        state: present       
    - name: Create OpenShift User ( {{ openshift_user }} )
      user: 
        name: "{{ openshift_user }}"
        comment: "OpenShift User"
        groups: "{{ openshift_user_groups }}"
        state: present
        append: yes
    - name: Update NFS options
      shell: "sed -i 's/rw,root_squash/rw,no_root_squash/' /etc/exports.d/ocp-workshop*"
      delegate_to: "{{ groups['nfs'][0] }}"
    - name: Bounce NFS
      service:
        name: nfs
        state: restarted
      delegate_to: "{{ groups['nfs'][0] }}"                
    - name: Create Kube Ops View project
      command: "oc new-project ocp-ops-view {{ openshift_creds }}"
      register: kube_ops
      ignore_errors: true
    - name: Initialize Kube Ops View Project
      command: "{{ item }} {{ openshift_creds }} -n ocp-ops-view"
      with_items:
        - oc create sa kube-ops-view
        - oc adm policy add-scc-to-user anyuid -z kube-ops-view
        - oc adm policy add-cluster-role-to-user cluster-admin -z kube-ops-view
        - oc apply -f https://raw.githubusercontent.com/raffaelespazzoli/kube-ops-view/ocp/deploy-openshift/kube-ops-view.yaml
        - oc expose svc kube-ops-view        
      when: kube_ops.rc == 0
    - name: Grant anyuid to pqc-support project
      command: oc adm policy add-scc-to-user anyuid -z default -n pqc-support {{ openshift_creds }}
    - name: Copy demo service file
      template:
        src: demo.service.j2
        dest: /etc/systemd/system/demo.service
    - name: Copy project initialization file
      template:
        src: projects.sh.j2
        dest: /home/{{ openshift_user }}/projects.sh
        owner: "{{ openshift_user }}"
        group: "{{ openshift_user }}"
        mode: '0700'
    - name: Copy PQC Template Files
      copy:
        src: "{{ item }}"
        dest: /home/{{ openshift_user }}/pqc_templates/
        owner: "{{ openshift_user }}"
        group: "{{ openshift_user }}"
        mode: '0664'
      with_fileglob:
        - pqc_templates/*
    - name: Create SonarQube Directory
      file:
        path: "/home/{{ openshift_user }}/sonarqube"
        state: directory
    - name: Copy SonarQube Docker File
      copy:
        src: sonarqube/Dockerfile
        dest: "/home/{{ openshift_user }}/sonarqube/Dockerfile"
    - name:  Copy Custom Jenkins Instance Files
      copy:
        src: "{{ item }}"
        dest: /home/{{ openshift_user }}/ocp-jenkins/
        owner: "{{ openshift_user }}"
        group: "{{ openshift_user }}"
        mode: '0664'
      with_fileglob:
        - jenkins-ocp/*        
    - name: Reload services (just in case)
      command: systemctl daemon-reload
    - name: Download EAP Docker images
      docker_image: 
        name: "{{ item }}"
        state: present
      with_items: "{{ eap_images }}"
    - name: Start demo service (run once)
      service:
        name: demo
        state: started
        enabled: no
      async: 600
      poll: 10
    - name: Attach PVC to Jenkins
      command: oc volume dc/custom-jenkins --add --name=custom-jenkins-volume-1 -t pvc --claim-size=10Gi --overwrite --claim-name=pvc-jenkins -n pqc-support {{ openshift_creds }}
      ignore_errors: true
    - name: Update jenkins account
      command: "{{ item }} {{ openshift_creds }}"
      with_items:
        - oc create sa jenkins -n pqc-support
        - oc policy add-role-to-user edit system:serviceaccount:pqc-support:jenkins -n pqc-dev
        - oc policy add-role-to-user edit system:serviceaccount:pqc-support:jenkins -n pqc-test
        - oc policy add-role-to-user edit system:serviceaccount:pqc-support:jenkins -n pqc-prod
        - oc adm policy add-scc-to-user privileged -z jenkins -n pqc-support
        - oc adm policy add-scc-to-user anyuid  -z jenkins -n pqc-support
        - oc policy add-role-to-user edit system:serviceaccount:pqc-support:default -n pqc-dev
        - oc policy add-role-to-user edit system:serviceaccount:pqc-support:default -n pqc-test
        - oc policy add-role-to-user edit system:serviceaccount:pqc-support:default -n pqc-prod
        - oc adm policy add-scc-to-user privileged -z default -n pqc-support
        - oc adm policy add-scc-to-user anyuid  -z default -n pqc-support
      ignore_errors: true
    - name: Login to OCP docker repository
      shell: oc login https://{{ inventory_hostname }} -u opentlc-mgr -p 'r3dh4t1!' --insecure-skip-tls-verify && docker login -u $(oc whoami) -p $(oc whoami -t) docker-registry.default.svc:5000
#    - name: Pull Jenkins slave SCAP image
#      git:
#        repo: 'https://github.com/kharyam/jenkins.git'
#        dest: /tmp/scap    
#    - name: Build Jenkins slave SCAP image and push into OCP
#      docker_image:
#        path: /tmp/scap/slave-scap
#        dockerfile: Dockerfile.rhel7
#        name: docker-registry.default.svc:5000/openshift/scap-slave:latest
#        tag: latest
#        push: yes
#        state: present
    - name: Push Jenkins slave SCAP image into repo from docker hub (Currently cannot build image on this RHPDS cluster)
      docker_image:
        name: docker.io/kharyam/scap-scanner
        repository: docker-registry.default.svc:5000/openshift/scap-slave
        tag: latest
        push: yes
        state: present        
    - name: Copy eclipse che install script
      template:
        src: eclipse-che/install.sh.j2
        dest: /tmp/install.sh
        owner: root
        group: root
        mode: '0700'
    - name: Install jq
      get_url: 
        url: "{{ jq_download }}"
        dest: /usr/bin/jq
        mode: 0555
        validate_certs: no
    - name: Install eclipse che
      command: /tmp/install.sh
    - name: Configure eclipse che users
      command: "{{ item }} {{ openshift_creds }} -n eclipse-che"
      with_items:
        - oc adm policy add-scc-to-user anyuid -z default 
        - oc adm policy add-scc-to-user anyuid -z che
        - oc adm policy add-scc-to-user privileged -z default
        - oc adm policy add-scc-to-user privileged -z che
      ignore_errors: true
    - name: Update che config map
      command: "oc patch cm/che -p '{ \"data\": {\"che-openshift-secure-routes\" : \"false\", \"che-secure-external-urls\": \"false\", \"che.docker.server_evaluation_strategy.custom.external.protocol\": \"http\"} }'"
    - name: Expose che as http
      command: "{{ item }} -n eclipse-che {{ openshift_creds }}"
      with_items:
        - oc delete route che
        - oc expose svc/che-host --name=che --hostname=che-eclipse-che.{{ openshift_master_default_subdomain }}
      ignore_errors: true
    - name: Delete che limit range
      command: "oc delete limitrange --all -n eclipse-che {{ openshift_creds }}"
      ignore_errors: true
    - name: Patch che DC, set SCC privileged to true
      command: "oc patch dc/che --patch='{\"spec\": {\"template\": {\"spec\": {\"containers\": [  {\"name\":\"che\",\"securityContext\": { \"privileged\": true }}]}}}}' -n eclipse-che {{ openshift_creds }}"
    - name: Get gogs volume
      shell: "oc get pvc/pvc-gogs -n pqc-support {{ openshift_creds }} | grep pvc-gogs | awk '{print $3}'"
      register: gogs_volume
    - name: "Extract gogs data (user: developer password: Welcome1!)"
      unarchive:
        src: gogs-pvc.tar.gz
        dest: /srv/nfs/user-vols/{{ gogs_volume.stdout }}
        group: 1000
        owner: 1000
      delegate_to: "{{ groups['nfs'][0] }}"
    - name: Restart gogs
      command: oc rollout latest gogs -n pqc-support {{ openshift_creds }}
      ignore_errors: true
